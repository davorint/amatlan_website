// Prisma schema for Amatlan Morelos Directory

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User and Authentication
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String?
  avatar    String?
  role      UserRole @default(VISITOR)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  facilitator    Facilitator?
  reviews        Review[]
  bookings       Booking[]
  communityPosts CommunityPost[]
  eventAttendees EventAttendee[]
  postComments   PostComment[]

  @@map("users")
}

enum UserRole {
  VISITOR
  FACILITATOR
  ADMIN
}

// Facilitators and Experience Providers
model Facilitator {
  id               String            @id @default(cuid())
  userId           String            @unique
  bio              String?
  phone            String?
  website          String?
  socialMedia      Json?
  verified         Boolean           @default(false)
  subscriptionPlan SubscriptionPlan  @default(FREE)
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt

  // Relations
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  experiences Experience[]

  @@map("facilitators")
}

enum SubscriptionPlan {
  FREE
  BASIC
  PREMIUM
}

// Core Experience Types
model Experience {
  id               String         @id @default(cuid())
  title            String
  slug             String         @unique
  description      String
  longDescription  String?
  category         Category
  subcategory      String?
  price            Float?
  currency         String         @default("MXN")
  duration         String?
  capacity         Int?
  images           String[]
  location         Json? // {lat, lng, address}
  tags             String[]
  featured         Boolean        @default(false)
  active           Boolean        @default(true)
  facilitatorId    String
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt

  // Relations
  facilitator Facilitator     @relation(fields: [facilitatorId], references: [id], onDelete: Cascade)
  reviews     Review[]
  bookings    Booking[]
  sessions    ExperienceSession[]

  @@map("experiences")
}

enum Category {
  TEMAZCAL
  RETREAT
  ECO_STAY
  HEALER
  NATURE
}

model ExperienceSession {
  id           String   @id @default(cuid())
  experienceId String
  startTime    DateTime
  endTime      DateTime?
  maxCapacity  Int?
  currentCount Int      @default(0)
  price        Float?
  active       Boolean  @default(true)
  createdAt    DateTime @default(now())

  // Relations
  experience Experience @relation(fields: [experienceId], references: [id], onDelete: Cascade)
  bookings   Booking[]

  @@map("experience_sessions")
}

// Reviews and Ratings
model Review {
  id           String   @id @default(cuid())
  userId       String
  experienceId String
  rating       Int      // 1-5 stars
  title        String?
  content      String?
  images       String[]
  verified     Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  experience Experience @relation(fields: [experienceId], references: [id], onDelete: Cascade)

  @@unique([userId, experienceId])
  @@map("reviews")
}

// Bookings and Reservations
model Booking {
  id                String            @id @default(cuid())
  userId            String
  experienceId      String
  sessionId         String?
  participants      Int               @default(1)
  totalPrice        Float
  status            BookingStatus     @default(PENDING)
  paymentIntentId   String?
  specialRequests   String?
  contactInfo       Json // {email, phone, name}
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt

  // Relations
  user       User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  experience Experience         @relation(fields: [experienceId], references: [id], onDelete: Cascade)
  session    ExperienceSession? @relation(fields: [sessionId], references: [id])

  @@map("bookings")
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}

// Events and Calendar
model Event {
  id          String   @id @default(cuid())
  title       String
  slug        String   @unique
  description String
  content     String?
  startDate   DateTime
  endDate     DateTime?
  location    Json? // {lat, lng, address}
  images      String[]
  tags        String[]
  price       Float?
  currency    String   @default("MXN")
  maxCapacity Int?
  featured    Boolean  @default(false)
  active      Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  attendees EventAttendee[]

  @@map("events")
}

model EventAttendee {
  id        String   @id @default(cuid())
  userId    String
  eventId   String
  status    AttendeeStatus @default(REGISTERED)
  createdAt DateTime @default(now())

  // Relations
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  event Event @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@unique([userId, eventId])
  @@map("event_attendees")
}

enum AttendeeStatus {
  REGISTERED
  CONFIRMED
  CANCELLED
  ATTENDED
}

// Community and Content
model CommunityPost {
  id        String      @id @default(cuid())
  userId    String
  title     String
  content   String
  images    String[]
  tags      String[]
  type      PostType    @default(DISCUSSION)
  featured  Boolean     @default(false)
  published Boolean     @default(true)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  // Relations
  user     User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  comments PostComment[]

  @@map("community_posts")
}

enum PostType {
  DISCUSSION
  STORY
  QUESTION
  GUIDE
}

model PostComment {
  id        String   @id @default(cuid())
  postId    String
  userId    String
  content   String
  parentId  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  post     CommunityPost  @relation(fields: [postId], references: [id], onDelete: Cascade)
  user     User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  parent   PostComment?   @relation("CommentReplies", fields: [parentId], references: [id])
  replies  PostComment[]  @relation("CommentReplies")

  @@map("post_comments")
}

// Content Management
model Guide {
  id          String      @id @default(cuid())
  title       String
  slug        String      @unique
  description String
  content     String
  category    GuideCategory
  tags        String[]
  images      String[]
  audioUrl    String?
  duration    Int?        // in minutes
  difficulty  Difficulty  @default(BEGINNER)
  featured    Boolean     @default(false)
  published   Boolean     @default(true)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@map("guides")
}

enum GuideCategory {
  MEDITATION
  CEREMONY
  HEALING
  NATURE
  CULTURE
  PREPARATION
}

enum Difficulty {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

// Blog and Journal
model BlogPost {
  id          String   @id @default(cuid())
  title       String
  slug        String   @unique
  excerpt     String?
  content     String
  coverImage  String?
  images      String[]
  tags        String[]
  category    String
  featured    Boolean  @default(false)
  published   Boolean  @default(true)
  publishedAt DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("blog_posts")
}

// Configuration and Settings
model SiteConfig {
  id        String   @id @default(cuid())
  key       String   @unique
  value     Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("site_config")
}
